# 6.1 Stacks

> Stack : Last In, First Out 원칙에 따라 요소들을 삽입하거나 삭제하는 자료구조

예를 들면, Web browser의 최근 방문 기록 기능이 Stack으로 구현된다.
사이트를 방문할 때 마다 방문기록 stack에 URL을 넣고, 
사용자가 뒤로가기 버튼을 눌렀을 때, Stack의 가장 위에 놓인 URL로 redirect하게 된다.

또한, 텍스트 편집기나 문서 편집기의 되돌리기(Undo)기능도 Stack으로 구현된다.

## 6.1.1 The Stack ADT

일반적으로 Stack ADT는 다음 메서드들을 지원해야한다.

1. **S.push(e)** : Stack `s`에 element `e`를 삽입한다.
2. **S.pop()** : Stack `s`의 top에 있는 element를 반환하고, **삭제한다**. 만약 Stack이 empty라면, 에러가 발생한다.
3. **S.top()** : Stack `s`의 top에 있는 element를 반환한다. 만약 Stack이 empty라면, 에러가 발생한다.
4. **S.is_empty()** : Stack이 비어있는지 여부를 검사해준다. 비어있다면 True를 반환하고, 비어있지 않다면 False를 반환한다.
5. **len(S)** : Stack에 들어있는 요소의 개수를 반환한다. Python에서는 Stack 구현 클래스에 `__len__()` 메서드를 추가해주면 된다.

## 6.1.2 Simple Array-Based Stack Implementation

Python에서 라이브러리나 내장함수로 Stack 기능을 지원해주지는 않고, 직접 List로 구현해주어야 한다.
List class는 기본적으로 배열의 맨 뒤에 요소를 삽입해주는 `append`함수와 
가장 뒤에 존재하는 element를 반환하고 삭제해주는 `pop`함수를 지원한다.
(**pop**함수 안에 index를 집어넣으면 해당 index를 반환하고 삭제해주기도 한다)

### The Adapter Pattern

어댑터 디자인 패턴은 Java의 Override라고 생각하면 된다.
즉, 기존 클래스를 수정해서 새로운 클래스나 인터페이스의 메소드와 일치하도록 하는 경우 적용한다.

Stack ADT는 Python의 List를 사용해서 어댑터 패턴을 적용할 수 있다.


## 6.1.3 Reversing Data Using a Stack
## 6.1.4 Matching Parentheses and HTML Tags

# 6.2 Queues
## 6.2.1 The Queue ADT
## 6.2.2 Array-Based Queue Implementation

# 6.3 Double-Ended Queues
## 6.3.1 The Deque ADT
## 6.3.2 Implementing a Deque with a CircularArray
## 6.3.3 Deques in the Python Collections Module
