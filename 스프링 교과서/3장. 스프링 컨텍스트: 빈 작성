## 3.1 구성 파일에서 정의된 Bean 간 관계 구현

Context에 추가된 Bean 사이에 관계(의존성)을 설정하고 싶을때가 반드시 있다. 당연히 Spring에서는 이 기능을 지원하고 있다. 책에서는 Parrot과 Person 사이의 관계를 설정하여 설명한다.

#### Parrot Class
```java
public class Parrot {

    private String name;
    
    public void setName(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }
    
    @Override
    public String toString() {
        return "Parrot : " + name;
    }
    
}

```

#### Person Class
```java
public class Person {
    private String name;
    private Parrot parrot;
    
    public void setName(String name) {
        this.name = name;
    }
    
    public String getName() {
        return name;
    }
    
    public void setParrot(Parrot parrot) {
        this.parrot = parrot;
    }
    
    public Parrot getParrot() {
        return parrot;
    }
    
}

```

---

이제 두 클래스를 Spring context에 집어넣으면 된다.

```java
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class ProjectConfig {
    
    @Bean
    public Parrot parrot(){
        Parrot p = new Parrot();
        p.setName("My Parrot");
        return p;
    }
    
    @Bean
    public Person person(){
        Person p = new Person();
        p.setName("My Person");
        return p;
    }
}

```

일단 이렇게 구성이 되어있는 상태라면 Person과 Parrot의 관계가 아직 설정되어있지 않은 상태이다.

이를 메인에서 사용해보면 다음과 같이 Person이 가지고 있는 Parrot은 NULL로 표시된다.

![](https://velog.velcdn.com/images/calzone0404/post/019313e7-82bf-4387-8739-361a43492a3e/image.png)

### 3.1.1 두 @Bean 메서드 간 직접 메서드를 호출하는 빈 작성

Parrot과 Person의 관계를 설정하기 위해, 의존성을 설정하려는 메서드에서 직접 @Bean 메서드를 호출하는 방법이 있다. 다음과 같이 작성하면 된다.

```java
@Bean
public Person person(){
    Person p = new Person();
    p.setName("Sullung");
    p.setParrot(parrot());
    return p;
}
```

이제 다시 main 함수를 실행해보면 관계가 설정되어 null이 아닌 다른 값이 뜬다.

![](https://velog.velcdn.com/images/calzone0404/post/ac4a0dfb-cfe6-4ef1-b4ab-40eefde5ff23/image.png)

#### 이렇게 구성하면 Parrot 인스턴스가 2개 생성되는가?

> 스프링은 Parrot 인스턴스가 Bean에 등록되어 있고, Bean에 등록된 Person 인스턴스에서 Parrot에 대한 관계를 설정한다는 것을 알아차리고 인스턴스를 `새로`생성하는 것이 아니라 Bean에서 가져다가 사용하게 된다. **따라서 전체적으로 단 하나의 Parrot 인스턴스가 존재한다.**
>
> 만약 Context에 Parrot Bean이 존재한다면 그대로 가져오게 되고, Context에 Parrot Bean이 존재하지 않는다면 parrot() 메서드를 호출해서 빈을 반환해준다.

이를 테스트하려면 Parrot 클래스에 생성자를 하나 만들어주면 되는데, 다음과 같이 만들어보자.

```java
public class Parrot {

    private String name;

    public Parrot() {
        System.out.println("Parrot constructor called");
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return "Parrot : " + name;
    }

}
```

아래 사진과 같이 딱 한번만 Constructor가 실행되었다.
![](https://velog.velcdn.com/images/calzone0404/post/8ea54b6c-a1d8-4cea-9a06-032007749446/image.png)

### 3.1.2 @Bean 메서드의 매개변수로 빈 와이어링 하기

@Bean annotation이 붙은 메서드를 직접 호출하는게 아니라 매개변수로 직접 전달하는 방법이다. 예시 코드를 한번 확인해보자.

```java
@Bean
public Person person(Parrot parrot){
    Person p = new Person();
    p.setName("Sullung");
    p.setParrot(parrot);
    return p;
}
```

Parrot은 Bean으로 설정되어 있으므로 자동으로 스프링이 Context에서 Bean을 꺼내와서 매개변수에 집어넣어준다. (**의존성 주입 DI**)

실행결과도 동일한것을 볼 수 있다.
![](https://velog.velcdn.com/images/calzone0404/post/3fff5004-ba93-430d-9469-d0d96d0565d2/image.png)

#### 의존성 주입 Dependency Injection

> DI는 프레임워크가 특정 필드나 매개변수에 값을 설정하는 기법이라고 생각하면 된다. 스프링은 IoC 원리를 사용하므로 당연한 소리라고 생각된다.

## 3.2 @Autowired Annotation을 사용한 Bean 주입

3.1절에 소개한 방법과는 달리 @Autowired annotation을 사용하여 Bean을 주입할 수 있다. 주로 이 방법을 사용하여 프로덕션 레벨 코드를 개발한다고 한다. 이 방법에 익숙해져야 할 것 같다.

#### @Autowired를 사용하는 방법

1. 클래스의 필드에 값 주입하는 경우
2. 클래스의 생성자 매개변수로 값 주입하는 경우
3. setter로 값 주입하는 경우 (비추천)

### 3.2.1 클래스의 필드에 값 주입하는 방법

이 방법은 매우 간단하지만, 프로덕션 코드를 작성할 때는 사용하지 않는다고 한다. 하지만 개념 증명, 테스트 작성 시 자주 쓰는 방법이라고 하므로 몰라도 하는 개념은 아니다!

이전에 했던 방법은 ProjectConfiguration Class에 직접 Bean 메서드를 지정해서 했었지만, 이번에는 ComponentScan 방식을 사용한다. 다음과 같이 Parrot, Person, ProjectConfig 클래스를 수정해주면 된다.

```java
import org.springframework.stereotype.Component;

@Component
public class Parrot {

    private String name = "Miki";

    public Parrot() {
        System.out.println("Parrot constructor called");
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        return name;
    }
}
```

```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class Person {
    private String name = "Sullung";

    @Autowired
    private Parrot parrot;


    public String getName() {
        return name;
    }
    
    public Parrot getParrot() {
        return parrot;
    }

}
```

```java
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan(basePackages = "com.sullung")
public class ProjectConfig {
}

```

이렇게 Component Scan과 Autowired 방식을 통해 의존성을 주입하여 관계를 설정해주면, 알아서 스프링이 Person에게 Parrot을 가져다준다.

실행 결과는 아래와 같다.
![](https://velog.velcdn.com/images/calzone0404/post/42317153-109d-402e-aaab-8905885776f7/image.png)

### 3.2.2 Autowired를 사용해서 생성자로 값 주입하는 방법

이 방법은 프로덕션 코드에서 가장 자주 이용되는 방식이기 때문에 숙지하는것이 좋다고 한다. 이 방법을 사용할 때의 장점은 의존성 주입을 받는 필드를 final로 설정할 수 있다는 점이라고 한다.

```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class Person {
    private String name = "Sullung";
    public final Parrot parrot;

    @Autowired
    public Person(Parrot parrot) {
        this.parrot = parrot;
    }

    public String getName() {
        return name;
    }

    public Parrot getParrot() {
        return parrot;
    }

}
```

마찬가지로 결과는 동일하게 출력된다.

![](https://velog.velcdn.com/images/calzone0404/post/eff21ad5-a029-481e-ba5e-a1440ce6495a/image.png)

### 3.2.3 setter를 이용한 의존성 주입 사용

이 방법은 권장되지 않는 방법이나, 일단 하는 방법은 알아두는게 좋기 때문에 책에서 제공되었다.

```java
@Component
public class Person {
    private String name = "Sullung";
    public Parrot parrot;

    @Autowired
    public void setParrot(Parrot parrot) {
        this.parrot = parrot;
    }
    ...
```

마찬가지로 결과는 동일하게 나온다.

![](https://velog.velcdn.com/images/calzone0404/post/c4f34b55-ec4b-49ec-b7ba-9c2241d68808/image.png)

## 3.3 순환 의존성 다루기

순환 의존성이 발생하는 경우는 Python Flask에서 발생했던 것 처럼 A를 실행하기 위해서 B가 필요한데, B를 실행하려면 A가 필요한 상황이다.

Spring에서도 마찬가지로 의존성 주입을 할 때 순환 의존성 문제가 발생하게 되는데, 만약 Parrot 인스턴스 생성 시 Person이 필요하고, Person 인스턴스 생성 시 Parrot이 필요하다면

컴파일 시 다음과 같이 에러가 발생하며 당장 해결해야 한다고 메세지를 뱉어낸다.

예를 들어 다음과 같은 상황의 경우,
```java
@Component
public class Person {
    private String name = "Sullung";
    public Parrot parrot;

    @Autowired
    public Person(Parrot parrot) {
        this.parrot = parrot;
    }
```

```java
@Component
public class Parrot {

    private String name = "Miki";
    public final Person person;

    public Parrot(Person person) {
        this.person = person;
    }
```

![](https://velog.velcdn.com/images/calzone0404/post/d529afbb-2fbe-482d-b104-96b8375ca111/image.png)

이렇게 순환 의존성 해결하라는 메세지가 뜬다. 따라서 코드 설계를 다시 해줘야 한다.

## 3.4 Spring context에서 여러 Bean 중 하나 선택하기

#### 1. 매개변수의 이름이 Bean 이름과 동일한 경우

```java
@Configuration
public class ProjectConfig {

    @Bean
    public Parrot parrot() {
        Parrot p = new Parrot();
        p.setName("Koko");
        return p;
    }

    @Bean
    public Parrot parrot2(){
        Parrot p = new Parrot();
        p.setName("Dodo");
        return p;
    }

    @Bean
    public Person person(Parrot parrot2) { 
    // parrot2 매개변수 이름이  Bean 이름과 동일하다.
    // 따라서 Parrot의 이름이 Dodo로 설정된다.
        Person person = new Person();
        person.setName("Sullung");
        person.setParrot(parrot2);
        return person;
    }
}
```

#### 2. 매개변수의 식별자가 Bean 이름과 일치하지 않는 경우

> @Primary가 붙어있는 Bean이 있으면, 자동으로 Primary Bean을 선택해서 주입해준다.

> @Qualifier annotation을 사용하여 특정 빈을 명시적으로 선택할 수 있다.

> 어떤 Bean도 Primary가 아니고, Qualifier를 사용하지도 않았으면 에러가 발생한다.

Qualifier를 사용하는 경우,
```java
@Configuration
public class ProjectConfig {

    @Bean
    public Parrot parrot() {
        Parrot p = new Parrot();
        p.setName("Koko");
        return p;
    }

    @Bean
    public Parrot parrot2(){
        Parrot p = new Parrot();
        p.setName("Dodo");
        return p;
    }

    @Bean
    public Person person(@Qualifier("parrot2") Parrot parrot) {
    // Qualifier를 사용하여 Parrot2를 명시해준다
    // 따라서 Parrot의 이름은 Dodo로 설정된다.
        Person person = new Person();
        person.setName("Sullung");
        person.setParrot(parrot);
        return person;
    }
}
```

![](https://velog.velcdn.com/images/calzone0404/post/e258b019-bd67-4c6a-bdc7-ea5521cd4645/image.png)
